---
title: "desafio 7"
author: "Sophia ra277230"
format: html
editor: visual
---

## Desafio 7

Um segundo aspecto importante de manipulaC'C#o de bancos de dados C) a inserC'C#o de novos dados. No caso de SQLite, consideraremos:

-   InserC'C#o de novas tabelas.

-   InserC'C#o de linhas em uma tabela.

-   CriaC'C#o de um banco de dados.

```{r}
#install.packages("RSQLite")
library(RSQLite)
library(tidyverse)
path <- getwd()
if(!"discoCopy.db" %in% list.files(path)){
  file.copy("../Documentos/me315/disco.db",
          "../Documentos/me315/discoCopy.db")
  } 
```

```{r}
db <- dbConnect(SQLite(),
                "H:/Documentos/me315/discoCopy.db")
```

## Inserindo nova tabela

Neste momento, existem as seguintes tabelas em disco.db:

```{r}
dbListTables(db)
```

A sintaxe para criar uma tabela vazia, no SQLite, C) atravC)s do comando CREATE TABLE nome (col1 tipo, col2 tipo2, ...)

```{r}
#dbExecute(db,
#"CREATE TABLE instruments
#(AlbumId INTEGER,
#TrackId INTEGER,
#ElectricGuitar INTEGER,
#Singer INTEGER,
#Trumpet INTEGER)")
```

## Removendo uma tabela

chamando a tabela criada anteriormente

```{r}
#dbExecute(db,
#"CREATE TABLE instruments
#(AlbumId INTEGER,
#TrackId INTEGER,
#ElectricGuitar INTEGER,
#Singer INTEGER,
#Trumpet INTEGER)")

dbListFields(db,'instruments')
```

VocC\* pode remover uma tabela usando o comando DROP TABLE nome

```{r}
#remove a tabela
dbExecute(db, "DROP TABLE instruments")
```

verificando se a tabela foi removida (ok)

```{r}
dbListTables(db)
```

## Um ligeiroparC\*ntese:Bestpractices

se vocC\* tem um aplicativo (por exemplo, em Shiny) que colhe inputs do usuC!rio em aname e diz quais C!lbums deste artista estC#o listados:

```{r}
aname = "Gilberto Gil"
sql = paste0("SELECT ArtistId FROM artists ",
             "WHERE Name = '", 
             aname,
             "'")

aId = dbGetQuery(db, sql)

sql = paste('SELECT Title FROM albums',
            'WHERE ArtistId ='
            , aId)
dbGetQuery(db, sql)

```

Um usuC!rio malicioso pode inserir algo como

```{r}
aname <- "Gilberto Gil'; DROP TABLE 'albums"
```

E destruir seu banco de dados!

## Bestpractices

O RSQLite oferece funC'C5es que executam queries com seguranC'a.

```{r}
sql = paste("SELECT ArtistId FROM artists",
            "WHERE Name = ?")
query <- dbSendQuery(db, sql)
dbBind(query, list("Gilberto Gil"))
aId <- dbFetch(query)
dbClearResult(query)
# Segundo passo interno, nC#o deve causar problema
sql = paste('SELECT Title FROM albums',
            'WHERE ArtistId ='
            , aId)
dbGetQuery(db, sql)

```

## 

Incluindo linhas numa tabela

Uma maneira defazC\*-lo C) usando o comando INSERT INTO tabela VALUES (...), complementar uma informaC'C#o

chamando a tabela 'instruments'

```{r}
dbExecute(db,
"CREATE TABLE instruments
(AlbumId INTEGER,
TrackId INTEGER,
ElectricGuitar INTEGER,
Singer INTEGER,
Trumpet INTEGER)") 
dbListFields(db, 'instruments')
```

```{r}
# Eu Tu Eles: AlbumId 85,
sql = paste('SELECT TrackId, Name FROM tracks',
            'WHERE AlbumId = 85')
dbGetQuery(db, sql) %>% head

```

## Incluindo linhas numa tabela

```{r}
dbExecute(db,
          "INSERT INTO instruments VALUES ('85', '1075' , 0, 1, 0), ('85', '1078', 0, 1, 0); ")
```

verificando se foi adicionada a linha

```{r}
dbGetQuery(db, "SELECT * FROM instruments")

```

## Inserindo uma tabela diretamente

incluindo o banco de dados 'mtcars' no banco de dados que temos

```{r}
#dbWriteTable(db, "mtcars", mtcars)
dbListTables(db)
```

```{r}
dbGetQuery(db, "SELECT * FROM mtcars") %>% head(3)
```

## Inserindo uma tabela diretamente:append

O parC"metro append concatena uma tabela nova a dados existentes.

```{r}
theAvgCar <- mtcars %>%
  summarise_all(function(x) round(mean(x), 2))
theAvgCar
```

```{r}
dbWriteTable(db, "mtcars", theAvgCar, append = TRUE)
dbGetQuery(db, "SELECT * FROM mtcars") %>% tail(3)

```

## Inserindo uma tabela diretamente:overwrite

O parC"metro overwrite sobrescreve a tabela.

```{r}
dbWriteTable(db,"mtcars", mtcars, overwrite = TRUE)
dbGetQuery(db,"SELECT * FROM mtcars") %>% tail(3)
```

## Lendo em chunck

Em certo sentido, dbGetQuery() C) um atalho para dbSendQuery() seguido de dbFetch() (e dbClearResult()). Uma vantagem de usar a sintaxe mais longa C) que podemos ler dados em chunks:

```{r}
res <- dbSendQuery(db,"SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
  chunk <- dbFetch(res, n = 5)
  print(nrow(chunk))
}
```

```{r}
dbClearResult(res)
```

## Fechando conexC5es

remover a cC3pia que fiz da database disco.db.

```{r}
if("discoCopy.db" %in% list.files(path)){
  file.remove("H:/Documentos/me315/discoCopy.db")
}
dbDisconnect(db)
```

## Criando sua base de dados

```{r}
airports <- read_csv("H:/Documentos/me315/airports.csv", col_types = "cccccdd")
airlines <- read_csv("H:/Documentos/me315/airlines.csv", col_types = "cc")
air <- dbConnect(SQLite(), dbname="H:/Documentos/me315/air.db")
dbWriteTable(air, name = "airports", airports)
dbWriteTable(air, name = "airlines", airlines)
dbListTables(air)
```

VocC\* tambC)m pode usar a funC'C#o copy_to(conn, df) do dplyr! A sintaxe C) parecida.

```{r}
dbDisconnect(air)
if("air.db" %in% list.files(path)){
file.remove("H:/Documentos/me315/air.db")
  }
```

## Breve introduC'C#o ao dbplyr

O pacote dbplyr estende algumas funcionalidades do dplyr a dados que estC#o armazenados em um bancos de dados externo.

```{r}
library(RSQLite)
library(tidyverse)
library(dbplyr)
db <- dbConnect(SQLite(), "H:/Documentos/me315/disco.db") # original
tracks <- tbl(db, "tracks") # dplyr
tracks %>% head(3)

```

## Verbos do dplyr disponC-veis...

```{r}
meanTracks <- tracks %>%
group_by(AlbumId) %>%
summarise(AvLen = mean(Milliseconds, na.rm = TRUE),
          AvCost = mean(UnitPrice, na.rm = TRUE))
meanTracks
```

```{r}
#comando sql
meanTracks %>% show_query()

```

consulta

```{r}
mT <- meanTracks %>% collect()
mT
```

```{r}
dbDisconnect(db) 
```
